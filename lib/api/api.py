# [file name]: __init__.py
from __future__ import annotations
import asyncio
import time
import random
import json
from typing import Any, Dict, List, Optional, Union, Callable
from dataclasses import dataclass
from contextlib import asynccontextmanager, contextmanager
from concurrent.futures import ThreadPoolExecutor
from functools import wraps
from unittest.mock import Mock
import aiohttp
import requests
from loguru import logger

try:
    from jsonschema import validate, ValidationError
except ImportError:
    validate = None
    ValidationError = Exception


@dataclass
class APIResponse:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API"""
    status: int
    data: Any
    headers: Dict[str, str]
    elapsed: float
    url: str

    @property
    def success(self) -> bool:
        return 200 <= self.status < 300

    def json(self) -> Any:
        return self.data

    def raise_for_status(self):
        if not self.success:
            raise Exception(f"HTTP {self.status} for {self.url}")


class RetryPolicy:
    """–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""

    def __init__(
            self,
            max_retries: int = 3,
            backoff_factor: float = 1.0,
            retry_on: List[int] = None
    ):
        self.max_retries = max_retries
        self.backoff_factor = backoff_factor
        self.retry_on = retry_on or [429, 500, 502, 503, 504]

    def should_retry(self, status: int, attempt: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å"""
        return attempt < self.max_retries and status in self.retry_on

    def get_delay(self, attempt: int) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π"""
        return self.backoff_factor * (2 ** attempt)


class CircuitBreaker:
    """Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–±–æ–µ–≤"""

    def __init__(
            self,
            failure_threshold: int = 5,
            recovery_timeout: int = 60,
            expected_exceptions: tuple = (Exception,)
    ):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.expected_exceptions = expected_exceptions

        self.failures = 0
        self.state = "CLOSED"  # CLOSED, OPEN, HALF_OPEN
        self.last_failure_time = 0

    def can_execute(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å"""
        if self.state == "OPEN":
            if time.time() - self.last_failure_time > self.recovery_timeout:
                self.state = "HALF_OPEN"
                return True
            return False
        return True

    def on_success(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if self.state == "HALF_OPEN":
            self.state = "CLOSED"
        self.failures = 0

    def on_failure(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        self.failures += 1
        self.last_failure_time = time.time()

        if self.failures >= self.failure_threshold:
            self.state = "OPEN"


class RateLimiter:
    """Rate limiting —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏"""

    def __init__(self, requests_per_second: int = 10, algorithm: str = "token_bucket"):
        self.rps = requests_per_second
        self.algorithm = algorithm
        self.tokens = requests_per_second
        self.last_refill = time.time()
        self.requests_history: List[float] = []

    def acquire(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"""
        if self.algorithm == "token_bucket":
            return self._token_bucket_acquire()
        elif self.algorithm == "fixed_window":
            return self._fixed_window_acquire()
        else:
            return True

    def _token_bucket_acquire(self) -> bool:
        """Token bucket –∞–ª–≥–æ—Ä–∏—Ç–º"""
        now = time.time()
        time_passed = now - self.last_refill
        new_tokens = time_passed * self.rps

        self.tokens = min(self.rps, self.tokens + new_tokens)
        self.last_refill = now

        if self.tokens >= 1:
            self.tokens -= 1
            return True
        return False

    def _fixed_window_acquire(self) -> bool:
        """Fixed window –∞–ª–≥–æ—Ä–∏—Ç–º"""
        now = time.time()
        window_start = now // 1  # –¢–µ–∫—É—â–∞—è —Å–µ–∫—É–Ω–¥–∞

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests_history = [t for t in self.requests_history if t >= window_start]

        if len(self.requests_history) < self.rps:
            self.requests_history.append(now)
            return True
        return False


class CacheManager:
    """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤"""

    def __init__(self, ttl: int = 300):  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.ttl = ttl
        self.cache: Dict[str, Dict] = {}

    def get_key(self, method: str, endpoint: str, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫–µ—à–∞"""
        param_str = json.dumps(params, sort_keys=True) if params else ""
        return f"{method.upper()}_{endpoint}_{param_str}"

    def get(self, key: str) -> Optional[APIResponse]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞"""
        if key in self.cache:
            cached = self.cache[key]
            if time.time() - cached['timestamp'] < self.ttl:
                logger.debug(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {key}")
                return cached['response']
            else:
                del self.cache[key]  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–µ—à
        return None

    def set(self, key: str, response: APIResponse):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à"""
        self.cache[key] = {
            'response': response,
            'timestamp': time.time()
        }


class ResponseValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ JSON Schema"""

    def __init__(self):
        self.schemas: Dict[str, Dict] = {}

    def add_schema(self, name: str, schema: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.schemas[name] = schema
        logger.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {name}")

    def validate_response(self, response: APIResponse, schema_name: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ —Å—Ö–µ–º–µ"""
        if schema_name not in self.schemas:
            logger.warning(f"–°—Ö–µ–º–∞ '{schema_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        if validate is None:
            logger.warning("jsonschema –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False

        try:
            if isinstance(response.data, dict):
                validate(instance=response.data, schema=self.schemas[schema_name])
                logger.debug(f"‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ —Å—Ö–µ–º–µ '{schema_name}'")
                return True
            else:
                logger.warning("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON –æ–±—ä–µ–∫—Ç–æ–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                return False
        except ValidationError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False


class MockManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.mocks: Dict[str, Mock] = {}
        self.enabled = False

    def add_mock(
            self,
            endpoint: str,
            method: str = "GET",
            response_data: Any = None,
            status: int = 200,
            headers: Dict = None
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–∫ –¥–ª—è endpoint'–∞"""
        mock_key = f"{method.upper()}_{endpoint}"

        mock_response = Mock()
        mock_response.status = status
        mock_response.data = response_data or {"message": "Mock response"}
        mock_response.headers = headers or {}
        mock_response.elapsed = 0.1
        mock_response.success = 200 <= status < 300

        self.mocks[mock_key] = mock_response
        logger.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–æ–∫ –¥–ª—è {mock_key}")

    def enable_mocks(self):
        """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –º–æ–∫–æ–≤"""
        self.enabled = True
        logger.info("üî∂ –†–µ–∂–∏–º –º–æ–∫–æ–≤ –í–ö–õ–Æ–ß–ï–ù")

    def disable_mocks(self):
        """–í—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –º–æ–∫–æ–≤"""
        self.enabled = False
        logger.info("üî∑ –†–µ–∂–∏–º –º–æ–∫–æ–≤ –í–´–ö–õ–Æ–ß–ï–ù")

    def get_mock_response(self, method: str, endpoint: str) -> Optional[APIResponse]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å"""
        if not self.enabled:
            return None

        mock_key = f"{method.upper()}_{endpoint}"
        mock = self.mocks.get(mock_key)

        if mock:
            logger.debug(f"üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫ –¥–ª—è {mock_key}")
            return APIResponse(
                status=mock.status,
                data=mock.data,
                headers=mock.headers,
                elapsed=mock.elapsed,
                url=f"mock://{endpoint}"
            )

        return None


class MetricsCollector:
    """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.metrics: Dict[str, List] = {
            'response_times': [],
            'status_codes': [],
            'errors': [],
            'throughput': []
        }
        self.start_time = time.time()

    def record_request(self, response: APIResponse):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        self.metrics['response_times'].append(response.elapsed)
        self.metrics['status_codes'].append(response.status)

        if not response.success:
            self.metrics['errors'].append({
                'status': response.status,
                'url': response.url,
                'timestamp': time.time()
            })

    def get_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫"""
        total_requests = len(self.metrics['response_times'])
        total_time = time.time() - self.start_time

        successful_requests = len([s for s in self.metrics['status_codes'] if 200 <= s < 300])

        return {
            'total_requests': total_requests,
            'success_rate': (successful_requests / total_requests * 100) if total_requests > 0 else 0,
            'avg_response_time': sum(self.metrics['response_times']) / total_requests if total_requests > 0 else 0,
            'requests_per_second': total_requests / total_time if total_time > 0 else 0,
            'error_count': len(self.metrics['errors']),
            'status_distribution': {
                code: self.metrics['status_codes'].count(code)
                for code in set(self.metrics['status_codes'])
            }
        }

    def print_metrics(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        summary = self.get_summary()
        logger.info("üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {summary['total_requests']}")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {summary['total_requests'] - summary['error_count']}")
        logger.info(f"   –û—à–∏–±–æ–∫: {summary['error_count']}")
        logger.info(f"   Success Rate: {summary['success_rate']:.1f}%")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {summary['avg_response_time']:.3f}—Å–µ–∫")
        logger.info(f"   RPS: {summary['requests_per_second']:.1f}")


class LoadTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, results: List[Dict], duration: int, total_requests: int, errors: int):
        self.results = results
        self.duration = duration
        self.total_requests = total_requests
        self.errors = errors

    @property
    def success_rate(self) -> float:
        if self.total_requests == 0:
            return 0.0
        return (self.total_requests - self.errors) / self.total_requests * 100

    @property
    def avg_response_time(self) -> float:
        if not self.results:
            return 0.0
        successful_times = [r['elapsed'] for r in self.results if r.get('success')]
        if not successful_times:
            return 0.0
        return sum(successful_times) / len(successful_times)

    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç"""
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.total_requests}")
        logger.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.duration}—Å–µ–∫")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.total_requests - self.errors}")
        logger.info(f"   –û—à–∏–±–æ–∫: {self.errors}")
        logger.info(f"   Success Rate: {self.success_rate:.1f}%")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {self.avg_response_time:.3f}—Å–µ–∫")
        logger.info(f"   RPS: {self.total_requests / self.duration:.1f}")


class LoadTest:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, client: APIClient):
        self.client = client
        self.results: List[Dict] = []

    def run(
            self,
            endpoint: str,
            method: str = "GET",
            rps: int = 10,
            duration: int = 30,
            **kwargs
    ) -> LoadTestResult:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"""
        logger.info(f"üß™ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: {method} {endpoint}, {rps} RPS, {duration}—Å–µ–∫")

        start_time = time.time()
        request_count = 0
        errors = 0

        while time.time() - start_time < duration:
            batch_start = time.time()

            # –°–æ–∑–¥–∞–µ–º batch –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ RPS
            futures = []
            with ThreadPoolExecutor(max_workers=rps) as executor:
                for _ in range(rps):
                    future = executor.submit(
                        self.client.request, method, endpoint, **kwargs
                    )
                    futures.append(future)

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è batch
                for future in futures:
                    try:
                        response = future.result(timeout=self.client.timeout)
                        self.results.append({
                            'status': response.status,
                            'elapsed': response.elapsed,
                            'success': response.success,
                            'timestamp': time.time()
                        })
                        if not response.success:
                            errors += 1
                    except Exception as e:
                        errors += 1
                        self.results.append({
                            'status': 0,
                            'elapsed': 0,
                            'success': False,
                            'error': str(e),
                            'timestamp': time.time()
                        })
                    request_count += 1

            # –†–µ–≥—É–ª–∏—Ä—É–µ–º RPS
            batch_time = time.time() - batch_start
            if batch_time < 1.0:
                time.sleep(1.0 - batch_time)

        return LoadTestResult(self.results, duration, request_count, errors)


class APIClient:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ–∏—á"""

    def __init__(
            self,
            base_url: str = "",
            timeout: int = 30,
            default_headers: Dict[str, str] = None,
            session: requests.Session = None,
            retry_policy: RetryPolicy = None,
            circuit_breaker: CircuitBreaker = None,
            rate_limiter: RateLimiter = None,
            enable_cache: bool = False,
            enable_metrics: bool = False,
            enable_validation: bool = False
    ):
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout
        self.default_headers = default_headers or {}
        self._session = session or requests.Session()
        self._async_session: Optional[aiohttp.ClientSession] = None

        # –í—Å–µ —Ñ–∏—á–∏
        self.retry_policy = retry_policy or RetryPolicy()
        self.circuit_breaker = circuit_breaker or CircuitBreaker()
        self.rate_limiter = rate_limiter
        self.mock_manager = MockManager()
        self.validator = ResponseValidator() if enable_validation else None
        self.cache = CacheManager() if enable_cache else None
        self.metrics = MetricsCollector() if enable_metrics else None
        self.load_tester = LoadTest(self)

        self._setup_session()

    def _setup_session(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é"""
        self._session.headers.update(self.default_headers)

    def _build_url(self, endpoint: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π URL"""
        if self.base_url:
            return f"{self.base_url}/{endpoint.lstrip('/')}"
        return endpoint

    def _process_response(self, response: requests.Response, elapsed: float) -> APIResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            data = response.json()
        except:
            data = response.text

        return APIResponse(
            status=response.status_code,
            data=data,
            headers=dict(response.headers),
            elapsed=elapsed,
            url=response.url
        )

    def request(
            self,
            method: str,
            endpoint: str,
            retry: bool = True,
            use_cache: bool = False,
            validate_schema: str = None,
            **kwargs
    ) -> APIResponse:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ–∏—á–∞–º–∏"""

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∫–∏
        mock_response = self.mock_manager.get_mock_response(method, endpoint)
        if mock_response:
            return mock_response

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
        if not self.circuit_breaker.can_execute():
            raise Exception("Circuit breaker is OPEN")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if self.rate_limiter and not self.rate_limiter.acquire():
            # –ñ–¥–µ–º –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            while not self.rate_limiter.acquire():
                time.sleep(0.1)

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = None
        if use_cache and self.cache and method.upper() == "GET":
            cache_key = self.cache.get_key(method, endpoint, kwargs.get('params'))
            cached_response = self.cache.get(cache_key)
            if cached_response:
                return cached_response

        url = self._build_url(endpoint)
        attempt = 0

        while True:
            attempt += 1
            start_time = time.time()

            logger.debug(f"üöÄ {method.upper()} {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")

            try:
                response = self._session.request(
                    method=method.upper(),
                    url=url,
                    timeout=self.timeout,
                    **kwargs
                )

                elapsed = time.time() - start_time
                api_response = self._process_response(response, elapsed)

                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if self.metrics:
                    self.metrics.record_request(api_response)

                logger.debug(f"‚úÖ {response.status_code} - {elapsed:.3f}s")

                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã
                if validate_schema and self.validator:
                    self.validator.validate_response(api_response, validate_schema)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                if cache_key and self.cache and api_response.success:
                    self.cache.set(cache_key, api_response)

                # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                if api_response.success:
                    self.circuit_breaker.on_success()
                    return api_response

                # –ù–µ—É—Å–ø–µ—à–Ω—ã–π, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                if (retry and
                        self.retry_policy.should_retry(api_response.status, attempt)):
                    delay = self.retry_policy.get_delay(attempt)
                    logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å–µ–∫ (—Å—Ç–∞—Ç—É—Å: {api_response.status})")
                    time.sleep(delay)
                    continue

                # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                self.circuit_breaker.on_failure()
                return api_response

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                self.circuit_breaker.on_failure()

                if (retry and
                        attempt < self.retry_policy.max_retries and
                        isinstance(e, self.circuit_breaker.expected_exceptions)):
                    delay = self.retry_policy.get_delay(attempt)
                    logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å–µ–∫ (–æ—à–∏–±–∫–∞: {e})")
                    time.sleep(delay)
                    continue

                raise

    # –ö–æ—Ä–æ—Ç–∫–∏–µ –º–µ—Ç–æ–¥—ã –∫–∞–∫ –≤ requests
    def get(self, endpoint: str, **kwargs) -> APIResponse:
        return self.request("GET", endpoint, **kwargs)

    def post(self, endpoint: str, **kwargs) -> APIResponse:
        return self.request("POST", endpoint, **kwargs)

    def put(self, endpoint: str, **kwargs) -> APIResponse:
        return self.request("PUT", endpoint, **kwargs)

    def delete(self, endpoint: str, **kwargs) -> APIResponse:
        return self.request("DELETE", endpoint, **kwargs)

    def patch(self, endpoint: str, **kwargs) -> APIResponse:
        return self.request("PATCH", endpoint, **kwargs)

    # –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    def load_test(
            self,
            endpoint: str,
            method: str = "GET",
            rps: int = 10,
            duration: int = 30,
            **kwargs
    ) -> LoadTestResult:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π"""
        return self.load_tester.run(endpoint, method, rps, duration, **kwargs)

    # Batch –æ–ø–µ—Ä–∞—Ü–∏–∏
    def batch(
            self,
            requests_config: List[Dict[str, Any]],
            parallel: bool = True
    ) -> List[APIResponse]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤"""

        def make_request(config: Dict) -> APIResponse:
            method = config.get('method', 'GET')
            endpoint = config['endpoint']
            request_kwargs = {k: v for k, v in config.items()
                              if k not in ['method', 'endpoint']}
            return self.request(method, endpoint, **request_kwargs)

        if parallel:
            with ThreadPoolExecutor() as executor:
                return list(executor.map(make_request, requests_config))
        else:
            return [make_request(config) for config in requests_config]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def async_request(self, method: str, endpoint: str, **kwargs) -> APIResponse:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        if not self._async_session:
            self._async_session = aiohttp.ClientSession(headers=self.default_headers)

        url = self._build_url(endpoint)
        start_time = time.time()

        logger.debug(f"üöÄ [ASYNC] {method.upper()} {url}")

        async with self._async_session.request(
                method=method.upper(),
                url=url,
                timeout=aiohttp.ClientTimeout(total=self.timeout),
                **kwargs
        ) as response:
            elapsed = time.time() - start_time

            try:
                data = await response.json()
            except:
                data = await response.text()

            logger.debug(f"‚úÖ [ASYNC] {response.status} - {elapsed:.3f}s")

            return APIResponse(
                status=response.status,
                data=data,
                headers=dict(response.headers),
                elapsed=elapsed,
                url=str(response.url)
            )

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –º–µ—Ç–æ–¥—ã
    async def async_get(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.async_request("GET", endpoint, **kwargs)

    async def async_post(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.async_request("POST", endpoint, **kwargs)

    async def async_put(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.async_request("PUT", endpoint, **kwargs)

    async def async_delete(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.async_request("DELETE", endpoint, **kwargs)

    async def async_patch(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.async_request("PATCH", endpoint, **kwargs)

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏—á–∞–º–∏
    def enable_mocks(self):
        """–í–∫–ª—é—á–∞–µ—Ç –º–æ–∫–∏"""
        self.mock_manager.enable_mocks()

    def disable_mocks(self):
        """–í—ã–∫–ª—é—á–∞–µ—Ç –º–æ–∫–∏"""
        self.mock_manager.disable_mocks()

    def add_mock(self, endpoint: str, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–∫"""
        self.mock_manager.add_mock(endpoint, **kwargs)

    def add_schema(self, name: str, schema: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if self.validator:
            self.validator.add_schema(name, schema)
        else:
            logger.warning("–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")

    def get_metrics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        return self.metrics.get_summary() if self.metrics else {}

    def print_metrics(self):
        """–í—ã–≤–æ–¥–∏—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        if self.metrics:
            self.metrics.print_metrics()

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏–∏"""
        self._session.close()
        if self._async_session:
            asyncio.run(self._async_session.close())


class APIManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ API –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""

    def __init__(self):
        self.clients: Dict[str, APIClient] = {}
        self._default_client: Optional[APIClient] = None

    def client(
            self,
            base_url: str = "",
            name: str = None,
            **kwargs
    ) -> APIClient:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç"""
        client_name = name or base_url or "default"

        if client_name not in self.clients:
            self.clients[client_name] = APIClient(base_url, **kwargs)
            logger.info(f"–°–æ–∑–¥–∞–Ω API –∫–ª–∏–µ–Ω—Ç: {client_name}")

            if client_name == "default":
                self._default_client = self.clients[client_name]

        return self.clients[client_name]

    def get_client(self, name: str = None) -> APIClient:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏"""
        client_name = name or "default"
        if client_name not in self.clients:
            raise ValueError(f"API –∫–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return self.clients[client_name]

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    def get(self, endpoint: str, **kwargs) -> APIResponse:
        return self.get_client().get(endpoint, **kwargs)

    def post(self, endpoint: str, **kwargs) -> APIResponse:
        return self.get_client().post(endpoint, **kwargs)

    def put(self, endpoint: str, **kwargs) -> APIResponse:
        return self.get_client().put(endpoint, **kwargs)

    def delete(self, endpoint: str, **kwargs) -> APIResponse:
        return self.get_client().delete(endpoint, **kwargs)

    async def async_get(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.get_client().async_get(endpoint, **kwargs)

    async def async_post(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.get_client().async_post(endpoint, **kwargs)

    async def async_put(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.get_client().async_put(endpoint, **kwargs)

    async def async_delete(self, endpoint: str, **kwargs) -> APIResponse:
        return await self.get_client().async_delete(endpoint, **kwargs)

    def close_all(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã"""
        for name, client in self.clients.items():
            client.close()
            logger.debug(f"–ó–∞–∫—Ä—ã—Ç API –∫–ª–∏–µ–Ω—Ç: {name}")


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
def create_client(
        base_url: str = "",
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        timeout: int = 30,
        default_headers: Dict = None,
        # –§–∏—á–∏
        enable_retry: bool = True,
        enable_circuit_breaker: bool = True,
        enable_rate_limiting: bool = False,
        rps_limit: int = 10,
        enable_cache: bool = False,
        enable_metrics: bool = False,
        enable_validation: bool = False,
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        retry_policy: Dict = None,
        circuit_breaker_config: Dict = None
) -> APIClient:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏"""

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏
    retry_policy_obj = RetryPolicy(**(retry_policy or {})) if enable_retry else None
    circuit_breaker_obj = CircuitBreaker(**(circuit_breaker_config or {})) if enable_circuit_breaker else None
    rate_limiter = RateLimiter(rps_limit) if enable_rate_limiting else None

    return APIClient(
        base_url=base_url,
        timeout=timeout,
        default_headers=default_headers,
        retry_policy=retry_policy_obj,
        circuit_breaker=circuit_breaker_obj,
        rate_limiter=rate_limiter,
        enable_cache=enable_cache,
        enable_metrics=enable_metrics,
        enable_validation=enable_validation
    )


# –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
def create_api_client(
        base_url: str,
        endpoints: Dict[str, Dict],
        **client_kwargs
) -> APIClient:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ endpoint'–∞–º–∏"""
    client = APIClient(base_url, **client_kwargs)

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint'–∞
    for endpoint_name, config in endpoints.items():
        method = config.get('method', 'GET')
        path = config.get('path', '')

        def create_endpoint_method(meth=method, pth=path):
            def endpoint_method(self, **kwargs):
                return self.request(meth, pth, **kwargs)

            return endpoint_method

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É
        setattr(client, endpoint_name, create_endpoint_method())

    return client


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
def load_test(
        endpoint: str,
        base_url: str = "",
        rps: int = 10,
        duration: int = 30,
        **kwargs
) -> LoadTestResult:
    """–ë—ã—Å—Ç—Ä—ã–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π"""
    client = APIClient(base_url)
    try:
        return client.load_test(endpoint, rps=rps, duration=duration, **kwargs)
    finally:
        client.close()


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
@contextmanager
def mock_mode():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ –º–æ–∫–æ–≤"""
    mock_client = create_client(enable_metrics=True)
    mock_client.enable_mocks()

    try:
        yield mock_client
    finally:
        mock_client.disable_mocks()
        mock_client.close()


@contextmanager
def rate_limited(rps: int = 10):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è rate limiting"""
    client = create_client(enable_rate_limiting=True, rps_limit=rps)
    try:
        yield client
    finally:
        client.close()


@contextmanager
def api_session(base_url: str = "", **kwargs):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è API —Å–µ—Å—Å–∏–∏"""
    client = APIClient(base_url, **kwargs)
    try:
        yield client
    finally:
        client.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
api_manager = APIManager()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
api = api_manager.client()


# –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get(endpoint: str, **kwargs) -> APIResponse:
    return api.get(endpoint, **kwargs)


def post(endpoint: str, **kwargs) -> APIResponse:
    return api.post(endpoint, **kwargs)


def put(endpoint: str, **kwargs) -> APIResponse:
    return api.put(endpoint, **kwargs)


def delete(endpoint: str, **kwargs) -> APIResponse:
    return api.delete(endpoint, **kwargs)


async def async_get(endpoint: str, **kwargs) -> APIResponse:
    return await api.async_get(endpoint, **kwargs)


async def async_post(endpoint: str, **kwargs) -> APIResponse:
    return await api.async_post(endpoint, **kwargs)


async def async_put(endpoint: str, **kwargs) -> APIResponse:
    return await api.async_put(endpoint, **kwargs)


async def async_delete(endpoint: str, **kwargs) -> APIResponse:
    return await api.async_delete(endpoint, **kwargs)

