# test_integration.py
from __future__ import annotations
import sys
import os
import tempfile
import yaml

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≤–∞—à–∏–º –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))


def test_config_and_logging_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è + –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===")

    from lib.config import config_manager, DatabaseConfig, ServerConfig
    from lib.logger import LoggerSetup, AppLogger

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
    test_config = {
        'application': {
            'name': 'TestApp',
            'env': 'test',
            'logger': {
                'level': 'DEBUG',
                'format': 'simple',
                'file': 'test.log'
            }
        },
        'server': {
            'url': 'https://api.test.com',
            'endpoint': '/api/v1'
        },
        'database': {
            'host': '46.148.205.149',
            'port': 5432,
            'database': 'transport',
            'user': 'dba',
            'password': 'vfvfvskfnfve'
        }
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager.load_from_dict(test_config)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    log_level = config_manager.get('application.logger.level', 'INFO')
    logger_setup = LoggerSetup(level=log_level, enable_file_logging=False)
    app_logger = AppLogger(name=config_manager.config.application.name)

    app_logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", component="integration_test")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ")


def test_database_and_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö + –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===")

    from lib.config import config_manager
    from lib.database import Database, db_manager

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å –ø–∞—Ä–æ–ª–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º @
    test_config = {
        'database': {
            'host': '10.0.50.181',
            'port': 5432,
            'database': 'transport',
            'user': 'dba',
            'password': 'vfvfvskfnfve'
        }
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager.load_from_dict(test_config)
    db_config = config_manager.config.database

    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_connection_string() –∫–æ—Ç–æ—Ä—ã–π —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    test_connection_string = db_config.get_connection_string(masked=False)

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    db = db_manager.add_database(
        name='transport',
        connection_string=test_connection_string,
        db_type='postgresql',
        set_default=True
    )

    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db._masked_connection_string()}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    result = db.test_connection()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {'–£—Å–ø–µ—à–Ω–æ' if result else '–ù–µ —É–¥–∞–ª–æ—Å—å'}")

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if result:
        query_result = db.exec("SELECT 1 as test_value")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: {query_result.success}")
        if query_result.success:
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {query_result.data}")

    return db_manager


def test_http_client_integration():
    """–¢–µ—Å—Ç HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\n=== –¢–µ—Å—Ç 3: HTTP –ö–ª–∏–µ–Ω—Ç ===")

    from lib.http import HttpClient, HttpManager

    # –°–æ–∑–¥–∞–µ–º HTTP –º–µ–Ω–µ–¥–∂–µ—Ä
    http_manager = HttpManager()
    client = http_manager.get_client(base_url="https://httpbin.org")

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    response = client.get("/get")
    if response and response.status_code == 200:
        print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)")

    return http_manager


def test_kafka_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Kafka"""
    print("\n=== –¢–µ—Å—Ç 4: Kafka ===")

    from lib.kafka import KafkaManager, KafkaProducerWrapper, KafkaConsumerWrapper

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Kafka (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    kafka_manager = KafkaManager(bootstrap_servers="gitlab-ci.ru:9092")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
    producer = kafka_manager.get_producer("test_topic", reuse=False)
    print(f"‚úÖ Producer —Å–æ–∑–¥–∞–Ω: {producer.topic}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
    consumer = kafka_manager.get_consumer("test_topic", group_id="test_group")
    print(f"‚úÖ Consumer —Å–æ–∑–¥–∞–Ω: {consumer.topic}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–µ–π–∫–æ–≤—É—é)
    success = producer.fake_send({"test": "message"})
    print(f"‚úÖ –§–µ–π–∫–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {success}")

    return kafka_manager


def test_utils_integration():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏"""
    print("\n=== –¢–µ—Å—Ç 5: –£—Ç–∏–ª–∏—Ç—ã ===")

    from lib.utils import data_utils, validation_utils, format_utils
    from lib.database import QueryResult

    # –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
    test_data = [{"id": 1, "name": "test"}, {"id": 2, "name": "test2"}]

    # DataUtils —Å –¥–∞–Ω–Ω—ã–º–∏
    chunks = list(data_utils.chunker(test_data, 1))
    print(f"‚úÖ DataUtils.chunker: {len(chunks)} —á–∞–Ω–∫–æ–≤")

    # ValidationUtils
    email_valid = validation_utils.is_valid_email("test@example.com")
    print(f"‚úÖ ValidationUtils.email: {email_valid}")

    # FormatUtils —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞
    result = QueryResult(data=test_data, rowcount=2)
    json_output = result.to_json()
    print(f"‚úÖ QueryResult.to_json: {len(json_output)} chars")

    bytes_formatted = format_utils.format_bytes(1024 * 1024)
    print(f"‚úÖ FormatUtils.bytes: {bytes_formatted}")


def test_complete_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow"""
    print("\n=== –¢–µ—Å—Ç 6: –ü–æ–ª–Ω—ã–π Workflow ===")

    from lib.config import config_manager
    from lib.logger import AppLogger
    from lib.database import db_manager
    from lib.http import HttpManager
    from lib.kafka import KafkaManager

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    app_logger = AppLogger(name="IntegrationTest")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'application': {'name': 'FullTest', 'env': 'test'},
        'database': {
            'host': '46.148.205.149', 'port': 5432,
            'database': 'transport', 'user': 'egais-management-documents-circulation-api', 'password': 'Kg5d@spQuM7Gf'
        }
    }
    config_manager.load_from_dict(config)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    app_logger.info("–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
                    component="full_workflow",
                    config_loaded=True)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è)
    try:
        db_manager.add_database(
            "main",
            "postgresql://test:test@localhost:5432/test",
            set_default=True
        )
        app_logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä")
    except Exception as e:
        app_logger.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ë–î", error=e)

    # HTTP –∫–ª–∏–µ–Ω—Ç
    http_manager = HttpManager()
    http_client = http_manager.get_client("https://httpbin.org")

    # Kafka –º–µ–Ω–µ–¥–∂–µ—Ä
    kafka_manager = KafkaManager("localhost:9092")

    app_logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã",
                    components=["config", "logging", "database", "http", "kafka"])

    print("‚úÖ –ü–æ–ª–Ω—ã–π workflow –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π...\n")

    try:
        # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è + –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_config_and_logging_integration()

        # –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö + –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        db_manager = test_database_and_config_integration()

        # –¢–µ—Å—Ç 3: HTTP –∫–ª–∏–µ–Ω—Ç
        http_manager = test_http_client_integration()

        # –¢–µ—Å—Ç 4: Kafka
        kafka_manager = test_kafka_integration()

        # –¢–µ—Å—Ç 5: –£—Ç–∏–ª–∏—Ç—ã
        test_utils_integration()

        # –¢–µ—Å—Ç 6: –ü–æ–ª–Ω—ã–π workflow
        test_complete_workflow()

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ú–æ–¥—É–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã.")

        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if 'db_manager' in locals():
            db_manager.close_all()
        if 'kafka_manager' in locals():
            kafka_manager.close_all()

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1

    return 0


if __name__ == "__main__":
    exit(main())