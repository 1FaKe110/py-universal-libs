from __future__ import annotations
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from typing import Dict, Any, Optional
from loguru import logger
import time


class HttpClient:
    """HTTP –∫–ª–∏–µ–Ω—Ç —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    def __init__(
            self,
            base_url: str = "",
            timeout: int = 30,
            max_retries: int = 3,
            backoff_factor: float = 1.0
    ):
        self.session = requests.Session()
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        retry_strategy = Retry(
            total=max_retries,
            backoff_factor=backoff_factor,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["GET", "POST", "PUT", "DELETE"]
        )

        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ requests
        import logging
        logging.getLogger("urllib3").setLevel(logging.WARNING)

        self.stats = {"success": 0, "errors": 0, "total_time": 0.0}

    def request(
            self,
            method: str,
            endpoint: str,
            **kwargs
    ) -> Optional[requests.Response]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if self.base_url:
            if endpoint:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏
                url = f"{self.base_url.rstrip('/')}/{endpoint.lstrip('/')}"
            else:
                url = self.base_url.rstrip('/')
        else:
            url = endpoint

        start_time = time.time()
        try:
            logger.info(f"üöÄ HTTP {method.upper()} –∑–∞–ø—Ä–æ—Å: {url}")

            if kwargs.get('params'):
                logger.debug(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {kwargs['params']}")
            if kwargs.get('headers'):
                logger.debug(
                    f"üì® –ó–∞–≥–æ–ª–æ–≤–∫–∏: {{k: v for k, v in kwargs['headers'].items() if k.lower() not in ['authorization', 'cookie']}}")

            response = self.session.request(
                method=method.upper(),
                url=url,
                timeout=self.timeout,
                **kwargs
            )

            duration = time.time() - start_time
            self.stats["total_time"] += duration
            self.stats["success"] += 1

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"‚úÖ HTTP {method.upper()} {response.status_code} - {duration:.3f}s - {url}")

            if response.status_code >= 400:
                logger.warning(f"‚ö†Ô∏è  –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {response.status_code}")
                if len(response.text) < 1000:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
                    logger.debug(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

            return response

        except requests.exceptions.ConnectionError as e:
            duration = time.time() - start_time
            self.stats["errors"] += 1
            logger.error(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return None

        except requests.exceptions.Timeout as e:
            duration = time.time() - start_time
            self.stats["errors"] += 1
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.stats["errors"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    def get(self, endpoint: str, **kwargs) -> Optional[requests.Response]:
        return self.request("GET", endpoint, **kwargs)

    def post(self, endpoint: str, **kwargs) -> Optional[requests.Response]:
        return self.request("POST", endpoint, **kwargs)

    def put(self, endpoint: str, **kwargs) -> Optional[requests.Response]:
        return self.request("PUT", endpoint, **kwargs)

    def delete(self, endpoint: str, **kwargs) -> Optional[requests.Response]:
        return self.request("DELETE", endpoint, **kwargs)

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"""
        total = self.stats["success"] + self.stats["errors"]
        avg_time = self.stats["total_time"] / max(self.stats["success"], 1)

        return {
            **self.stats,
            "total_requests": total,
            "success_rate": (self.stats["success"] / total * 100) if total > 0 else 0,
            "average_time_sec": round(avg_time, 3)
        }


class HttpManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTP –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""

    def __init__(self):
        self.clients = {}

    def get_client(self, base_url: str = "", **kwargs) -> HttpClient:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ URL"""
        key = base_url or "default"
        if key not in self.clients:
            self.clients[key] = HttpClient(base_url, **kwargs)
            logger.info(f"–°–æ–∑–¥–∞–Ω HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è: {base_url}")
        return self.clients[key]